import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import time
from mistralai import Mistral
from PyPDF2 import PdfReader, PdfWriter
import tempfile
from dotenv import load_dotenv

# --- Chargement des variables d‚Äôenvironnement ---
load_dotenv()
client = Mistral(api_key=os.getenv("MISTRAL_KEY"))
AGENT_ID = os.getenv("MISTRAL_AGENT")

# --- UTILITAIRE EXCEL : append s√©curis√© ---
def safe_append_to_excel(new_data, output_excel):
    df_new = pd.DataFrame(new_data)

    if os.path.exists(output_excel):
        try:
            df_existing = pd.read_excel(output_excel)
            print(f"üìÇ Ancien fichier d√©tect√© : {len(df_existing)} lignes")
            df_combined = pd.concat([df_existing, df_new], ignore_index=True)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la lecture du fichier Excel : {e}")
            df_combined = df_new
    else:
        print("üìÑ Nouveau fichier Excel cr√©√©")
        df_combined = df_new

    df_combined.drop_duplicates(subset=["Recto", "Verso"], inplace=True)
    df_combined.to_excel(output_excel, index=False)
    print(f"‚úÖ {len(df_combined)} lignes totales dans {output_excel}")


# --- OCR par lots ---
def process_pdf_with_mistral(pdf_path, pages_per_batch=10):
    reader = PdfReader(pdf_path)
    total_pages = len(reader.pages)
    all_text = []

    for start in range(0, total_pages, pages_per_batch):
        end = min(start + pages_per_batch, total_pages)
        print(f"üß© Traitement des pages {start + 1} √† {end}...")

        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_pdf:
            pdf_writer = PdfWriter()
            for i in range(start, end):
                pdf_writer.add_page(reader.pages[i])
            pdf_writer.write(temp_pdf)
            temp_path = temp_pdf.name

        with open(temp_path, "rb") as f:
            upload_res = client.files.upload(
                file={"file_name": f"chunk_{start+1}_to_{end}.pdf", "content": f},
                purpose="ocr"
            )

        file_id = upload_res.id
        signed = client.files.get_signed_url(file_id=file_id)
        document_url = signed.url

        ocr_res = client.ocr.process(
            model="mistral-ocr-latest",
            document={"type": "document_url", "document_url": document_url},
            include_image_base64=False
        )

        if not ocr_res:
            print(f"‚ö†Ô∏è OCR a √©chou√© pour les pages {start+1}-{end}")
            continue

        pages = getattr(ocr_res, "pages", None) or getattr(ocr_res, "output", None)
        if not pages:
            print(f"‚ö†Ô∏è OCR sans donn√©es pour les pages {start+1}-{end}")
            continue

        for page in pages:
            if hasattr(page, "markdown"):
                all_text.append(page.markdown)
            elif isinstance(page, str):
                all_text.append(page)

        print(f"‚úÖ OCR r√©ussi pour les pages {start+1}-{end}")

        try:
            os.remove(temp_path)
        except PermissionError:
            print(f"‚ö†Ô∏è Impossible de supprimer {temp_path} (encore utilis√©)")

    return "\n".join(all_text)


# --- Traitement principal ---
def imperator(pdf_verso, pdf_recto, output_excel, progress_callback=None):
    start_time = time.time()

    if progress_callback:
        progress_callback(5, "Lecture du recto...")
    recto_res = process_pdf_with_mistral(pdf_recto)

    if progress_callback:
        progress_callback(35, "Lecture du verso...")
    verso_res = process_pdf_with_mistral(pdf_verso)

    if progress_callback:
        progress_callback(55, "Analyse Mistral en cours...")

    content = f"""
Voici deux documents PDF √† traiter selon tes instructions :

--- RECTO ---
{recto_res}

--- VERSO ---
{verso_res}
    """

    agent_res = client.agents.complete(
        agent_id=AGENT_ID,
        messages=[{"role": "user", "content": content}]
    )

    response_text = agent_res.choices[0].message.content.strip()

    if progress_callback:
        progress_callback(80, "Analyse de la r√©ponse...")

    # Parsing du texte
    lines = [line.strip() for line in response_text.split("\n") if "|" in line]
    data = []
    for line in lines:
        try:
            num_part, phrases = line.split(" ", 1)
            recto, verso = phrases.split("|", 1)
            data.append({
                "Num√©ro": num_part.strip(),
                "Recto": recto.strip(),
                "Verso": verso.strip()
            })
        except ValueError:
            data.append({"Num√©ro": "", "Recto": line, "Verso": ""})

    # ‚úÖ Append s√©curis√©
    safe_append_to_excel(data, output_excel)

    if progress_callback:
        elapsed = round(time.time() - start_time, 2)
        progress_callback(100, f"Termin√© ‚úÖ ({elapsed}s)")

    return output_excel


# --- Interface graphique ---
class MistralApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üìò OCR Mistral - Recto/Verso")
        self.root.geometry("520x420")
        self.root.resizable(False, False)

        self.pdf_recto = tk.StringVar()
        self.pdf_verso = tk.StringVar()
        self.output_excel = tk.StringVar(value="resultats.xlsx")

        ttk.Label(root, text="S√©lection du PDF RECTO :").pack(pady=(20, 5))
        ttk.Entry(root, textvariable=self.pdf_recto, width=55).pack()
        ttk.Button(root, text="Parcourir", command=self.select_recto).pack(pady=5)

        ttk.Label(root, text="S√©lection du PDF VERSO :").pack(pady=(10, 5))
        ttk.Entry(root, textvariable=self.pdf_verso, width=55).pack()
        ttk.Button(root, text="Parcourir", command=self.select_verso).pack(pady=5)

        ttk.Label(root, text="Nom du fichier Excel de sortie :").pack(pady=(10, 5))
        ttk.Entry(root, textvariable=self.output_excel, width=55).pack()

        ttk.Button(root, text="‚ñ∂ Lancer le traitement", command=self.run_processing).pack(pady=15)

        self.progress = ttk.Progressbar(root, length=350, mode="determinate")
        self.progress.pack(pady=(10, 5))
        self.status_label = ttk.Label(root, text="En attente...")
        self.status_label.pack()

    def select_recto(self):
        path = filedialog.askopenfilename(filetypes=[("Fichiers PDF", "*.pdf")])
        if path:
            self.pdf_recto.set(path)

    def select_verso(self):
        path = filedialog.askopenfilename(filetypes=[("Fichiers PDF", "*.pdf")])
        if path:
            self.pdf_verso.set(path)

    def update_progress(self, value, message):
        self.progress["value"] = value
        self.status_label.config(text=message)
        self.root.update_idletasks()

    def run_processing(self):
        recto = self.pdf_recto.get()
        verso = self.pdf_verso.get()
        output = self.output_excel.get()

        if not recto or not verso:
            messagebox.showerror("Erreur", "Merci de s√©lectionner les deux fichiers PDF.")
            return

        try:
            output_path = imperator(verso, recto, output, progress_callback=self.update_progress)
            messagebox.showinfo("Succ√®s", f"Traitement termin√© üéâ\nFichier mis √† jour : {output_path}")
        except Exception as e:
            messagebox.showerror("Erreur", f"Une erreur est survenue : {e}")


# --- Lancement ---
if __name__ == "__main__":
    root = tk.Tk()
    app = MistralApp(root)
    root.mainloop()
